#!/usr/bin/env python3

import openai
import os
import sys
import nltk
import subprocess

# Check if the commit has additional message
if os.environ.get('GIT_EDITOR') == 'true':
    sys.exit(0)

# Read the path of commit message file and editor type
message_file = sys.argv[1]
temp = ".commit-temp"
editor = os.environ.get("EDITOR", "code")

# Set OpenAI API Key
openai.api_key = os.environ["OPENAI_API_KEY"]
if openai.api_key == "":
    print("Please set OPENAI_API_KEY environment variable.")
    sys.exit(1)

# Check if the temp file exists
if not os.path.exists(temp):
    ignore_rules = ""
    # Check if .diffignore exists
    if os.path.exists('.git/hooks/.diffignore'):
        # Get the diff of the commit
        # Ignore files in .diffignore in .git/hooks/
        with open('.git/hooks/.diffignore', 'r') as f:
            ignore_rules = ' '.join(':(exclude)'+line.strip()
                                    for line in f.readlines())

    # --cached: compare the staged version with the latest commit
    # --ignore-all-space: ignore all white space
    # --ignore-space-change: ignore changes in the amount of white space
    # --ignore-submodules: ignore changes to submodules
    # --word-diff: show word diff
    # --: separate the diff options from the file list
    # diff: show the diff of changed files
    os.system(
        f"git diff --cached --ignore-all-space --ignore-space-change --ignore-submodules --word-diff -- . '{ignore_rules}' > {temp}")

# Read the diff file
with open(message_file, 'r') as f:
    diff = f.read()

# Tokenize the diff
tokens = nltk.word_tokenize(diff)

# Check the length of diff
if len(tokens) > 1000:
    print("The diff is too long. Please remove some changes and try again.")
    os.system(f"{editor} {temp}")

# Remove the temporary file
os.system(f"rm {temp}")

# Use OpenAI API to generate commit message
prompt = (
    f"Create commit message: 50-char summary, 100-word max description, based on diff:\n\n{diff}\n")

# Read the path of commit message template file
template_file = os.environ.get("GIT_COMMIT_TEMPLATE")
if template_file is not None:
    with open(template_file) as f:
        prompt = f.read() + "\n\nWith previous template, " + prompt

# Use OpenAI API to generate commit message
model = "gpt-3.5-turbo-0301"
response = openai.ChatCompletion.create(
    model=model,
    messages=[{"role": "user", "content": prompt}],
    max_tokens=128,
    n=1,
    temperature=0.7,
)
print(response)
commit_message = response.choices[0].message.content.strip()

# Write the generated commit message into file
with open(message_file, "w") as f:
    f.write(commit_message)

# Open commit message file with editor
os.system(f"{editor} {message_file}")
